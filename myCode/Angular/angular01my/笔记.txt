MVC:    M： model数据模型，一条数据好比一个对象，因此将数据称为对象模型,控制数据
        V： view视图，用来控制如何展示
        C： controller控制器，连接模型与视图，起到控制，协调的功能

两次请求：
       第一次请求的是模板，html结构，第二次请求是数据，然后得到对象，再与模板进行合并

       jq就是提供了方法库，好用的简便的兼容的api，但是web开发没有思路的变化
       ng是给出了编写代码的规范，提供了一套解决方案，提供了一个新的代码的方式
          需要使用全新的方式来编写代码，思路必须按照其中的规则来实现


          jq只能叫做库，angular是一个框架
MVVM的概念:
            M：model 数据模型
            V：view  视图
            VM:viewModel  视图数据模型
双向数据绑定：
            MVVM框架都带有一个双向数据绑定的功能
            1 界面的数据发生变化，那么viewModel的数据也跟着变化（同步）
            2 viewModel中的数据变化，跟随的是界面中的数据发生变化（同步）

            强化了视图模型的功能（存在的意义就是表征页面），就是强化了双向数据绑定的能力
            弱化了控制器的功能（数据更新，控制调配，刷新显示）
            此时控制器就从中失去了作用，因此框架被称为MVVM（将c去掉了）

MVC MVVM 的区别：
            http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html


angular的使用：
            1 引入ng的库
            2 增加一个ng-app的属性，含有这个属性的html标签以及其子标签 由ng管理
            3 在标签中提供需要的html标签，如果需要ng处理MVVM功能，需要使用ng-model的属性
            4 在ng使用{{表达式}}来实现插值（和artTemplate中的<%= 表达式%>一个意思）


            一般来说写在body上，head不用angular维护
            ng-model后面的值跟变量的命名规则相同
区分：
            可以认为允许输入的标签（input textarea等），可以使用ng-model的形式实现双向数据绑定

            对于无法输入的标签（div p 等）应该使用插值语法来显示数据，单向数据绑定

模块：       在ng中不要讲所有的数据都挂载到全局viewModel中，也就是$rootScope里面
            应该将其按照功能分类（分模块）

            在ng中，使用模块的方式划分结构，在模块中又实用了控制器划分功能

            在ng中，一个ng-app相当于一个模块，如果想要操作模块的话，我就需要手动的创建模块




            如果需要实现一些复杂的功能就需要手动的创建模块
            1 在指定ng-app的时候需要一个名字（变量的命名规则），一旦写了名字，系统就不在创建默认的模块了

            2 创建模块的语法。。。

            3 利用模块创建该模块写的控制器
              语法：
              <模块对象>.controller('控制器的名字'，function（$scope）{
                控制器的代码
              })
              此时相当于在全局创建了一个控制器，$rootScope下创建了一个$scope


            模块：就是按照某个功能分类的对象集合

            $rootScope 是 $scope的原型

            一个模块下有多个controller，并不是多个子模块

            一个angular中只能有一个ng-app，可以使用bootstrap方法【不推荐】
            04 扩展-使用多模块【推荐】

            平行模块

            获得模块的方法
            angular.module('mainApp')

            angular.module('mainApp',['moduleA'])
            此时好比有一个对象mainAPP
            加载依赖的意思就是将moduleA中的属性加载到mainAPP中

            多模块（多对象）
            加载依赖模块的意义

            内部的provider服务，产生的function（$scope）
            中的参数$scope

            默认的模块无法访问

            常常将类似的框架称为 MV* 框架

     scrope
            scrope就是作用域

            控制器，只会在一开始执行，并且只执行一次

            双向数据绑定把style也省了

     5作用域的继承
      由于html有包含的关系，即树状结构。
      在树状就够中含有controller等属性，即与之对应的就有树状的scope结构


      rootscope中开始是没有txt属性的

 表达式：一、在js中所谓的表达式就是
    ---------由运算符连接数据而得到的有值的字符序列

       常量表达式：123，{}，function（）{}   字面量
       算数表达式：
       字符连接表达式：
       函数调用表达式：

       声明是在预解析的时候，而表达式是与运行的时候

       +function func(){              （function func(){
       cl('21');                        cl('21');
       }()                  ==        }）()

       +的作用就是声明转成表达式

       二、angularjs表达式
       在值绑定中或指令计算和替换的类似于js的代码片段

       例如：ng-model='txt' {{txt}} ng-click='function()'

       三、异同
       1.上下文（this）
       js：this是window
           ng只有在scope的方法中讨论（界面中的所有的数据都是scope的属性）
       ng：this是指当前的scope

       2.容错性
       js：console.log(num)报错，num未定义
       ng：{{txt}}在scope中即使没有该属性也不会报错，只会忽略不显示
       3.过滤器（filter）
         js中不含有过滤器
         ng中含有过滤器

       declaration 声明

       凡是表达式中的名字都是scope的属性

       过滤器是一个函数，该函数用于格式化需要显示的字符串

       如何使用过滤器
       两种用法：
       1.在插值表达式中直接使用 {{expr|filter:arg1:arg2:arg3|filter:args}}
       2.在代码中如何使用
         1在控制器中使用过滤器
         2在控制器的函数中参数上写$filter
           .controller('controllerName',function($scope,$filter){})
         3使用$filter（‘过滤器的名字’）  返回过滤器函数
         4使用该函数处理数据  返回想要的格式化的结果


       9有哪些内置的过滤器
       currency
       date ，
       filter，在数组或字符串中匹配后筛选出一个子数组或子字符














